{"ast":null,"code":"var _jsxFileName = \"C:\\\\dnd-campaign-site\\\\src\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { supabase } from \"./supabaseClient\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { locationData } from \"./MapNpcsQuests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Map = () => {\n  _s();\n  const [locations, setLocations] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const mapRef = React.useRef(null);\n  React.useEffect(() => {\n    const init = async () => {\n      await syncInitialData();\n      await fetchLocations();\n    };\n    init();\n  }, []);\n  const syncInitialData = async () => {\n    const {\n      data: existing,\n      error\n    } = await supabase.from(\"locations\").select(\"name\");\n    if (error) {\n      console.error(\"Error checking existing locations:\", error);\n      return;\n    }\n    const existingNames = existing.map(loc => loc.name);\n    for (const loc of locationData) {\n      if (!existingNames.includes(loc.name)) {\n        const {\n          error: insertError\n        } = await supabase.from(\"locations\").insert([{\n          name: loc.name,\n          description: loc.description,\n          x: \"50%\",\n          y: \"50%\",\n          quests: JSON.stringify(loc.quests),\n          npcs: JSON.stringify(loc.npcs.map(n => n.name))\n        }]);\n        if (insertError) {\n          console.error(`Error inserting ${loc.name}:`, insertError);\n        } else {\n          console.log(`Inserted: ${loc.name}`);\n        }\n      }\n    }\n  };\n  const fetchLocations = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from(\"locations\").select(\"*\");\n    if (error) {\n      console.error(\"Error fetching locations:\", error);\n      return;\n    }\n    setLocations(data.map(loc => ({\n      ...loc,\n      quests: JSON.parse(loc.quests || \"[]\"),\n      npcs: JSON.parse(loc.npcs || \"[]\")\n    })));\n  };\n\n  // ... existing updateLocation, handler functions, and render logic ...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-10\",\n    children: \"Your map UI here...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 10\n  }, this);\n};\n_s(Map, \"JZ4/IzxyVVkTAGyi93looT8NXOY=\");\n_c = Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","supabase","motion","AnimatePresence","locationData","jsxDEV","_jsxDEV","Map","_s","locations","setLocations","useState","selected","setSelected","mapRef","useRef","useEffect","init","syncInitialData","fetchLocations","data","existing","error","from","select","console","existingNames","map","loc","name","includes","insertError","insert","description","x","y","quests","JSON","stringify","npcs","n","log","parse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/dnd-campaign-site/src/Map.js"],"sourcesContent":["import React from \"react\";\r\nimport { supabase } from \"./supabaseClient\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { locationData } from \"./MapNpcsQuests\";\r\n\r\nexport const Map = () => {\r\n  const [locations, setLocations] = React.useState([]);\r\n  const [selected, setSelected] = React.useState(null);\r\n  const mapRef = React.useRef(null);\r\n\r\n  React.useEffect(() => {\r\n    const init = async () => {\r\n      await syncInitialData();\r\n      await fetchLocations();\r\n    };\r\n    init();\r\n  }, []);\r\n\r\n  const syncInitialData = async () => {\r\n    const { data: existing, error } = await supabase.from(\"locations\").select(\"name\");\r\n\r\n    if (error) {\r\n      console.error(\"Error checking existing locations:\", error);\r\n      return;\r\n    }\r\n\r\n    const existingNames = existing.map((loc) => loc.name);\r\n\r\n    for (const loc of locationData) {\r\n      if (!existingNames.includes(loc.name)) {\r\n        const { error: insertError } = await supabase.from(\"locations\").insert([\r\n          {\r\n            name: loc.name,\r\n            description: loc.description,\r\n            x: \"50%\",\r\n            y: \"50%\",\r\n            quests: JSON.stringify(loc.quests),\r\n            npcs: JSON.stringify(loc.npcs.map((n) => n.name))\r\n          }\r\n        ]);\r\n        if (insertError) {\r\n          console.error(`Error inserting ${loc.name}:`, insertError);\r\n        } else {\r\n          console.log(`Inserted: ${loc.name}`);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchLocations = async () => {\r\n    const { data, error } = await supabase.from(\"locations\").select(\"*\");\r\n\r\n    if (error) {\r\n      console.error(\"Error fetching locations:\", error);\r\n      return;\r\n    }\r\n\r\n    setLocations(\r\n      data.map((loc) => ({\r\n        ...loc,\r\n        quests: JSON.parse(loc.quests || \"[]\"),\r\n        npcs: JSON.parse(loc.npcs || \"[]\")\r\n      }))\r\n    );\r\n  };\r\n\r\n  // ... existing updateLocation, handler functions, and render logic ...\r\n\r\n  return <div className=\"p-10\">Your map UI here...</div>;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}